@inproceedings{georg,
 author = {Schmid, Georg Stefan and Kuncak, Viktor},
 title = {SMT-based Checking of Predicate-qualified Types for Scala},
 booktitle = {Proceedings of the 2016 7th ACM SIGPLAN Symposium on Scala},
 series = {SCALA 2016},
 year = {2016},
 isbn = {978-1-4503-4648-1},
 pages = {31--40},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2998392.2998398},
 doi = {10.1145/2998392.2998398},
 acmid = {2998398},
 publisher = {ACM},
 keywords = {Refinement Types, Scala},
} 

@inproceedings{liquid,
 author = {Jhala, Ranjit},
 title = {Refinement Types for Haskell},
 booktitle = {Proceedings of the ACM SIGPLAN 2014 Workshop on Programming Languages Meets Program Verification},
 series = {PLPV '14},
 year = {2014},
 isbn = {978-1-4503-2567-7},
 pages = {27--27},
 url = {http://doi.acm.org/10.1145/2541568.2541569},
 doi = {10.1145/2541568.2541569},
 acmid = {2541569},
 publisher = {ACM},
} 


@article{inox1,
      title = {Automating Verification of Functional Programs with  Quantified Invariants},
      author = {Voirol, Nicolas and Kuncak, Viktor},
      pages = {17},
      year = {2016},
      abstract = {We present the foundations of a verifier for higher-order  functional programs with generics and recursive algebraic  data types. Our ver- ifier supports finding sound proofs  and counterexamples even in the presence of certain  quantified invariants and recursive functions. Our approach  uses the same language to describe programs and in-  variants and uses semantic criteria for establishing  termination. Our implementation makes effective use of SMT  solvers by encoding first-class functions and quantifiers  into a quantifier-free fragment of first-order logic with  theories. We are able to specify properties of  datastructure operations involving higher-order functions  with minimal annotation overhead and verify them with a  high degree of automation. Our system is also effective at  reporting counterexam- ples, even in the presence of  first-order quantification.},
}

@article{inox2,
      title = {On Satisfiability for Quantified Formulas in  Instantiation-Based Procedures},
      author = {Voirol, Nicolas and Kuncak, Viktor},
      year = {2016},
      abstract = {Procedures for first-order logic with equality are used in  many modern theorem provers and solvers, yet procedure  termination in case of interesting sub-classes of  satisfiable formulas remains a challenging problem. We  present an instantiation-based semi-decision procedure  defined on a fragment of many-sorted first-order logic that  succeeds on certain satisfiable formulas even if they  contain, for example, associativity axioms. The models for  which our procedure terminates have finite ranges of  function symbols. We expect that our procedure can be  integrated into other instantiating procedures such as  E-matching with little performance impact. Our procedure is  also compatible with specialized verification techniques  that enable efficient reasoning about pure higher-order  recursive functions. We integrated our procedure into the  Leon verification framework. The implementation is publicly  available and has been evaluated on non-trivial benchmarks  featuring higher-order programs with quantified contracts.},
}
@inproceedings{leon,
 author = {Suter, Philippe and K\"{o}ksal, Ali Sinan and Kuncak, Viktor},
 title = {Satisfiability Modulo Recursive Programs},
 booktitle = {Proceedings of the 18th International Conference on Static Analysis},
 series = {SAS'11},
 year = {2011},
 isbn = {978-3-642-23701-0},
 url = {http://dl.acm.org/citation.cfm?id=2041552.2041575},
 acmid = {2041575},
 publisher = {Springer-Verlag},
} 